<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="29" total="47" passed="18">
  <reporter-output>
    <line>
      <![CDATA[[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.challengeFlowTest FAILED, Retrying 1 time]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.deleteChallenge FAILED, Retrying 1 time]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction FAILED, Retrying 1 time]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive FAILED, Retrying 1 time]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge FAILED, Retrying 1 time]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
    <line>
      <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
    </line>
  </reporter-output>
  <suite name="Wooplr_Challenge_Testcases" duration-ms="91894" started-at="2016-12-15T14:19:26Z" finished-at="2016-12-15T14:20:57Z">
    <groups>
      <group name="makeChallengeLive">
        <method signature="ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="makeChallengeLive" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- makeChallengeLive -->
      <group name="SANITY">
        <method signature="ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="challengeFlowTest" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="deleteChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.getChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="getChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.listChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallengeByAction" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="makeChallengeLive" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.validateListChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="validateListChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- SANITY -->
      <group name="validateListChallenge">
        <method signature="ChallengeTestPlan.validateListChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="validateListChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- validateListChallenge -->
      <group name="deleteChallenge">
        <method signature="ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="deleteChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- deleteChallenge -->
      <group name="listChallenge">
        <method signature="ChallengeTestPlan.listChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- listChallenge -->
      <group name="challengeFlowTest">
        <method signature="ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="challengeFlowTest" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- challengeFlowTest -->
      <group name="Sanity">
        <method signature="ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="challengeFlowTest" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="deleteChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.getChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="getChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.listChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallengeByAction" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="makeChallengeLive" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
        <method signature="ChallengeTestPlan.validateListChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="validateListChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- Sanity -->
      <group name="createChallenge">
        <method signature="ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- createChallenge -->
      <group name="listChallengeByAction">
        <method signature="ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallengeByAction" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- listChallengeByAction -->
      <group name="getChallenge">
        <method signature="ChallengeTestPlan.getChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="getChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- getChallenge -->
      <group name="updateChallenge">
        <method signature="ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" class="com.wooplr.challenge.test.ChallengeTestPlan"/>
      </group> <!-- updateChallenge -->
    </groups>
    <test name="Wooplr_Challenge Testscripts - Sanity" duration-ms="91894" started-at="2016-12-15T14:19:26Z" finished-at="2016-12-15T14:20:57Z">
      <class name="com.wooplr.challenge.test.ChallengeTestPlan">
        <test-method status="PASS" signature="beforeTestSuite(org.testng.ITestContext)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestSuite" is-config="true" duration-ms="15" started-at="2016-12-15T19:49:26Z" finished-at="2016-12-15T19:49:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestSuite -->
        <test-method status="PASS" signature="beforeTest(org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTest" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:26Z" finished-at="2016-12-15T19:49:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="7" started-at="2016-12-15T19:49:26Z" finished-at="2016-12-15T19:49:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5cf06070]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:31Z" finished-at="2016-12-15T19:49:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=challengeFlowTest status=FAILURE method=ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.challengeFlowTest FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:31Z" finished-at="2016-12-15T19:49:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:31Z" finished-at="2016-12-15T19:49:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=challengeFlowTest status=FAILURE method=ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.challengeFlowTest FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:31Z" finished-at="2016-12-15T19:49:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@294b88bb]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="challengeFlowTest" duration-ms="5297" started-at="2016-12-15T19:49:31Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=35|TestTitle=challengeFlowTest]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@1bcca778]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[ListAdminReviews is giving response as null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: ListAdminReviews is giving response as null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeTestPlan.challengeFlowTest(ChallengeTestPlan.java:245)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- challengeFlowTest -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:37Z" finished-at="2016-12-15T19:49:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=challengeFlowTest status=FAILURE method=ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:37Z" finished-at="2016-12-15T19:49:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=challengeFlowTest status=FAILURE method=ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:37Z" finished-at="2016-12-15T19:49:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.challengeFlowTest(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:37Z" finished-at="2016-12-15T19:49:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1dfdc22b]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1380" started-at="2016-12-15T19:49:37Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=1|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@32596d65]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:38Z" finished-at="2016-12-15T19:49:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:38Z" finished-at="2016-12-15T19:49:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:38Z" finished-at="2016-12-15T19:49:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="3" started-at="2016-12-15T19:49:38Z" finished-at="2016-12-15T19:49:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7ed6a46e]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1143" started-at="2016-12-15T19:49:38Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=2|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@5ea03ac7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:39Z" finished-at="2016-12-15T19:49:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:39Z" finished-at="2016-12-15T19:49:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:39Z" finished-at="2016-12-15T19:49:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:39Z" finished-at="2016-12-15T19:49:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3dc572d0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1028" started-at="2016-12-15T19:49:39Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=3|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@72b2e481]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:40Z" finished-at="2016-12-15T19:49:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:40Z" finished-at="2016-12-15T19:49:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:40Z" finished-at="2016-12-15T19:49:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:40Z" finished-at="2016-12-15T19:49:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6df4d55e]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1050" started-at="2016-12-15T19:49:40Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=4|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@17d936e4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:41Z" finished-at="2016-12-15T19:49:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:41Z" finished-at="2016-12-15T19:49:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:41Z" finished-at="2016-12-15T19:49:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:41Z" finished-at="2016-12-15T19:49:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@64e446b7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="959" started-at="2016-12-15T19:49:41Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=5|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@6d54c5cd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:42Z" finished-at="2016-12-15T19:49:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:42Z" finished-at="2016-12-15T19:49:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:42Z" finished-at="2016-12-15T19:49:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:42Z" finished-at="2016-12-15T19:49:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@46decc20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1287" started-at="2016-12-15T19:49:42Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=6|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@2026f78a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:44Z" finished-at="2016-12-15T19:49:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:44Z" finished-at="2016-12-15T19:49:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:44Z" finished-at="2016-12-15T19:49:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:44Z" finished-at="2016-12-15T19:49:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4d2b6d39]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1027" started-at="2016-12-15T19:49:44Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=7|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@4bf35b01]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:45Z" finished-at="2016-12-15T19:49:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:45Z" finished-at="2016-12-15T19:49:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:45Z" finished-at="2016-12-15T19:49:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:45Z" finished-at="2016-12-15T19:49:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5e0fe0c3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1026" started-at="2016-12-15T19:49:45Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=8|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@6b94760e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:46Z" finished-at="2016-12-15T19:49:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:46Z" finished-at="2016-12-15T19:49:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:46Z" finished-at="2016-12-15T19:49:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:46Z" finished-at="2016-12-15T19:49:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@646d5273]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="960" started-at="2016-12-15T19:49:46Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=9|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@557c6200]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:47Z" finished-at="2016-12-15T19:49:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:47Z" finished-at="2016-12-15T19:49:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:47Z" finished-at="2016-12-15T19:49:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="3" started-at="2016-12-15T19:49:47Z" finished-at="2016-12-15T19:49:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@45402f87]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1000" started-at="2016-12-15T19:49:47Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=10|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@5bcf59f5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:48Z" finished-at="2016-12-15T19:49:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:48Z" finished-at="2016-12-15T19:49:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:48Z" finished-at="2016-12-15T19:49:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:48Z" finished-at="2016-12-15T19:49:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@78f06b95]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1171" started-at="2016-12-15T19:49:48Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=11|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@58e0ca22]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:49Z" finished-at="2016-12-15T19:49:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:49Z" finished-at="2016-12-15T19:49:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:49Z" finished-at="2016-12-15T19:49:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:49Z" finished-at="2016-12-15T19:49:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7027413a]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1048" started-at="2016-12-15T19:49:49Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=12|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@70fc63b4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:50Z" finished-at="2016-12-15T19:49:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:50Z" finished-at="2016-12-15T19:49:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:50Z" finished-at="2016-12-15T19:49:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:50Z" finished-at="2016-12-15T19:49:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@212b805c]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="957" started-at="2016-12-15T19:49:50Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=13|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@23819b12]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:51Z" finished-at="2016-12-15T19:49:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:51Z" finished-at="2016-12-15T19:49:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:51Z" finished-at="2016-12-15T19:49:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="3" started-at="2016-12-15T19:49:51Z" finished-at="2016-12-15T19:49:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2ef82907]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="968" started-at="2016-12-15T19:49:51Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=14|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@6c15933d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:52Z" finished-at="2016-12-15T19:49:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="3" started-at="2016-12-15T19:49:52Z" finished-at="2016-12-15T19:49:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:52Z" finished-at="2016-12-15T19:49:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:52Z" finished-at="2016-12-15T19:49:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@264da2a8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="createChallenge" duration-ms="1755" started-at="2016-12-15T19:49:52Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=15|TestTitle=createChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@2d750345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:54Z" finished-at="2016-12-15T19:49:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:54Z" finished-at="2016-12-15T19:49:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:54Z" finished-at="2016-12-15T19:49:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createChallenge status=SUCCESS method=ChallengeTestPlan.createChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:54Z" finished-at="2016-12-15T19:49:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@32f1d73d]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:55Z" finished-at="2016-12-15T19:49:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteChallenge status=FAILURE method=ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.deleteChallenge FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:55Z" finished-at="2016-12-15T19:49:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteChallenge status=FAILURE method=ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.deleteChallenge FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:55Z" finished-at="2016-12-15T19:49:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:49:55Z" finished-at="2016-12-15T19:49:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@420f11e]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="deleteChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="deleteChallenge" duration-ms="1622" started-at="2016-12-15T19:49:55Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=17|TestTitle=deleteChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@3f78efba]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Showing wrong acknowledgement msg expected [null] but found [No challenge exist for given Id]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Showing wrong acknowledgement msg expected [null] but found [No challenge exist for given Id]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at com.wooplr.challenge.test.ChallengeTestPlan.deleteChallenge(ChallengeTestPlan.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteChallenge -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:57Z" finished-at="2016-12-15T19:49:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteChallenge status=FAILURE method=ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:57Z" finished-at="2016-12-15T19:49:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:57Z" finished-at="2016-12-15T19:49:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteChallenge status=FAILURE method=ChallengeTestPlan.deleteChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:57Z" finished-at="2016-12-15T19:49:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@eb5eab0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.getChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="getChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="getChallenge" duration-ms="1526" started-at="2016-12-15T19:49:57Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:49:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=16|TestTitle=getChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@42c88952]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getChallenge -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:58Z" finished-at="2016-12-15T19:49:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getChallenge status=SUCCESS method=ChallengeTestPlan.getChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:58Z" finished-at="2016-12-15T19:49:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getChallenge status=SUCCESS method=ChallengeTestPlan.getChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:49:58Z" finished-at="2016-12-15T19:49:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.getChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:49:58Z" finished-at="2016-12-15T19:49:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4942d05b]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="listChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallenge" duration-ms="7387" started-at="2016-12-15T19:49:58Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=30|TestTitle=listChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:06Z" finished-at="2016-12-15T19:50:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallenge status=SUCCESS method=ChallengeTestPlan.listChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:06Z" finished-at="2016-12-15T19:50:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallenge status=SUCCESS method=ChallengeTestPlan.listChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:06Z" finished-at="2016-12-15T19:50:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:06Z" finished-at="2016-12-15T19:50:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@417d2bf0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:07Z" finished-at="2016-12-15T19:50:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:07Z" finished-at="2016-12-15T19:50:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:07Z" finished-at="2016-12-15T19:50:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:07Z" finished-at="2016-12-15T19:50:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@cfbb27]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallengeByAction" duration-ms="1361" started-at="2016-12-15T19:50:07Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=32|TestTitle=listChallengeByAction]]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Showing wrong entries in ListChallenges by PARTICIPATED expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Showing wrong entries in ListChallenges by PARTICIPATED expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at com.wooplr.challenge.test.ChallengeHelper.validateTimeStamp(ChallengeHelper.java:112)
	at com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(ChallengeTestPlan.java:217)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listChallengeByAction -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:08Z" finished-at="2016-12-15T19:50:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:08Z" finished-at="2016-12-15T19:50:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:08Z" finished-at="2016-12-15T19:50:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:08Z" finished-at="2016-12-15T19:50:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4607fddb]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallengeByAction" duration-ms="1395" started-at="2016-12-15T19:50:08Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=33|TestTitle=listChallengeByAction]]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Showing wrong entries in ListChallenges by CURRENTGOING expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Showing wrong entries in ListChallenges by CURRENTGOING expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at com.wooplr.challenge.test.ChallengeHelper.validateTimeStamp(ChallengeHelper.java:116)
	at com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(ChallengeTestPlan.java:217)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listChallengeByAction -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:09Z" finished-at="2016-12-15T19:50:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:09Z" finished-at="2016-12-15T19:50:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:09Z" finished-at="2016-12-15T19:50:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="4" started-at="2016-12-15T19:50:09Z" finished-at="2016-12-15T19:50:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@36ab58c8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallengeByAction" duration-ms="1253" started-at="2016-12-15T19:50:09Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=33|TestTitle=listChallengeByAction]]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Showing wrong entries in ListChallenges by CURRENTGOING expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Showing wrong entries in ListChallenges by CURRENTGOING expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at com.wooplr.challenge.test.ChallengeHelper.validateTimeStamp(ChallengeHelper.java:116)
	at com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(ChallengeTestPlan.java:217)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listChallengeByAction -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:11Z" finished-at="2016-12-15T19:50:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:11Z" finished-at="2016-12-15T19:50:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:11Z" finished-at="2016-12-15T19:50:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="3" started-at="2016-12-15T19:50:11Z" finished-at="2016-12-15T19:50:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2b51ce82]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallengeByAction" duration-ms="1278" started-at="2016-12-15T19:50:11Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=34|TestTitle=listChallengeByAction]]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Created a challenge as PARTICIPATED, but it is not listed,, challengeId: 5736673905213440 expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Created a challenge as PARTICIPATED, but it is not listed,, challengeId: 5736673905213440 expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(ChallengeTestPlan.java:219)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listChallengeByAction -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:12Z" finished-at="2016-12-15T19:50:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:12Z" finished-at="2016-12-15T19:50:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:12Z" finished-at="2016-12-15T19:50:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:12Z" finished-at="2016-12-15T19:50:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7cccf06]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="listChallengeByAction" duration-ms="909" started-at="2016-12-15T19:50:12Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=34|TestTitle=listChallengeByAction]]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Created a challenge as PARTICIPATED, but it is not listed,, challengeId: 6473914906574848 expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Created a challenge as PARTICIPATED, but it is not listed,, challengeId: 6473914906574848 expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(ChallengeTestPlan.java:219)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- listChallengeByAction -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:13Z" finished-at="2016-12-15T19:50:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:13Z" finished-at="2016-12-15T19:50:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:13Z" finished-at="2016-12-15T19:50:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=listChallengeByAction status=FAILURE method=ChallengeTestPlan.listChallengeByAction(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:13Z" finished-at="2016-12-15T19:50:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@172b96ea]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:15Z" finished-at="2016-12-15T19:50:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=makeChallengeLive status=FAILURE method=ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:15Z" finished-at="2016-12-15T19:50:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=makeChallengeLive status=FAILURE method=ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:15Z" finished-at="2016-12-15T19:50:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:15Z" finished-at="2016-12-15T19:50:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2ec0e888]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="makeChallengeLive" duration-ms="2343" started-at="2016-12-15T19:50:15Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=18|TestTitle=makeChallengeLive]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@1af4f5b6]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(ChallengeTestPlan.java:123)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- makeChallengeLive -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:17Z" finished-at="2016-12-15T19:50:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=makeChallengeLive status=FAILURE method=ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:17Z" finished-at="2016-12-15T19:50:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=makeChallengeLive status=FAILURE method=ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:17Z" finished-at="2016-12-15T19:50:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:17Z" finished-at="2016-12-15T19:50:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7ae250b2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="makeChallengeLive" duration-ms="1867" started-at="2016-12-15T19:50:17Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=19|TestTitle=makeChallengeLive]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@67454c9e]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(ChallengeTestPlan.java:123)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- makeChallengeLive -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:19Z" finished-at="2016-12-15T19:50:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=makeChallengeLive status=FAILURE method=ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:19Z" finished-at="2016-12-15T19:50:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:19Z" finished-at="2016-12-15T19:50:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=makeChallengeLive status=FAILURE method=ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:19Z" finished-at="2016-12-15T19:50:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@20201525]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="makeChallengeLive" duration-ms="3625" started-at="2016-12-15T19:50:19Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=19|TestTitle=makeChallengeLive]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@59df9cf4]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(ChallengeTestPlan.java:123)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- makeChallengeLive -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:23Z" finished-at="2016-12-15T19:50:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=makeChallengeLive status=FAILURE method=ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:23Z" finished-at="2016-12-15T19:50:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=makeChallengeLive status=FAILURE method=ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:23Z" finished-at="2016-12-15T19:50:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.makeChallengeLive(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:23Z" finished-at="2016-12-15T19:50:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1a4c409d]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:24Z" finished-at="2016-12-15T19:50:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:24Z" finished-at="2016-12-15T19:50:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:24Z" finished-at="2016-12-15T19:50:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output=[RETRYING] class com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge FAILED, Retrying 1 time]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:24Z" finished-at="2016-12-15T19:50:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@42610e8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1449" started-at="2016-12-15T19:50:24Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=20|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@6f0babe8]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:26Z" finished-at="2016-12-15T19:50:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:26Z" finished-at="2016-12-15T19:50:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:26Z" finished-at="2016-12-15T19:50:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:26Z" finished-at="2016-12-15T19:50:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5f1ff178]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1325" started-at="2016-12-15T19:50:26Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=21|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@44ec15a4]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:27Z" finished-at="2016-12-15T19:50:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:27Z" finished-at="2016-12-15T19:50:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:27Z" finished-at="2016-12-15T19:50:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:27Z" finished-at="2016-12-15T19:50:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2a262e12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="3324" started-at="2016-12-15T19:50:27Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=21|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@12d9a936]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:31Z" finished-at="2016-12-15T19:50:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:31Z" finished-at="2016-12-15T19:50:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:31Z" finished-at="2016-12-15T19:50:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:31Z" finished-at="2016-12-15T19:50:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@309ab55c]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1330" started-at="2016-12-15T19:50:31Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=22|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@665755f5]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:32Z" finished-at="2016-12-15T19:50:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:32Z" finished-at="2016-12-15T19:50:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:32Z" finished-at="2016-12-15T19:50:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:32Z" finished-at="2016-12-15T19:50:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7cf8c3f1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1224" started-at="2016-12-15T19:50:32Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=22|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@61d8c8b4]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:33Z" finished-at="2016-12-15T19:50:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:33Z" finished-at="2016-12-15T19:50:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:33Z" finished-at="2016-12-15T19:50:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:33Z" finished-at="2016-12-15T19:50:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@30084350]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1255" started-at="2016-12-15T19:50:33Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=23|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@39c4d0cd]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:34Z" finished-at="2016-12-15T19:50:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:34Z" finished-at="2016-12-15T19:50:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:34Z" finished-at="2016-12-15T19:50:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:34Z" finished-at="2016-12-15T19:50:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6e7b51d2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1306" started-at="2016-12-15T19:50:34Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=23|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@20b02ce6]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:36Z" finished-at="2016-12-15T19:50:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:36Z" finished-at="2016-12-15T19:50:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:36Z" finished-at="2016-12-15T19:50:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:36Z" finished-at="2016-12-15T19:50:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6238eaa8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1314" started-at="2016-12-15T19:50:36Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=24|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@213709b3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:37Z" finished-at="2016-12-15T19:50:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:37Z" finished-at="2016-12-15T19:50:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:37Z" finished-at="2016-12-15T19:50:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:37Z" finished-at="2016-12-15T19:50:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6b5edf9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1655" started-at="2016-12-15T19:50:37Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=24|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@39ef77c2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:39Z" finished-at="2016-12-15T19:50:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:39Z" finished-at="2016-12-15T19:50:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:39Z" finished-at="2016-12-15T19:50:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:39Z" finished-at="2016-12-15T19:50:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@121a79e0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1651" started-at="2016-12-15T19:50:39Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=25|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@3f44bc95]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:40Z" finished-at="2016-12-15T19:50:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:40Z" finished-at="2016-12-15T19:50:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:40Z" finished-at="2016-12-15T19:50:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:40Z" finished-at="2016-12-15T19:50:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@8376a69]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1370" started-at="2016-12-15T19:50:40Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=25|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@3de74140]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:42Z" finished-at="2016-12-15T19:50:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:42Z" finished-at="2016-12-15T19:50:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:42Z" finished-at="2016-12-15T19:50:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:42Z" finished-at="2016-12-15T19:50:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6e2b17b5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1489" started-at="2016-12-15T19:50:42Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=26|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@1ef2ea97]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:43Z" finished-at="2016-12-15T19:50:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:43Z" finished-at="2016-12-15T19:50:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:43Z" finished-at="2016-12-15T19:50:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:43Z" finished-at="2016-12-15T19:50:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4f21a494]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1273" started-at="2016-12-15T19:50:43Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=26|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@5782db47]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:45Z" finished-at="2016-12-15T19:50:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:45Z" finished-at="2016-12-15T19:50:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:45Z" finished-at="2016-12-15T19:50:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:45Z" finished-at="2016-12-15T19:50:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@29bc1922]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="3514" started-at="2016-12-15T19:50:45Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=27|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@7f4f84d5]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:48Z" finished-at="2016-12-15T19:50:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:48Z" finished-at="2016-12-15T19:50:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:48Z" finished-at="2016-12-15T19:50:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:48Z" finished-at="2016-12-15T19:50:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7c161c95]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1691" started-at="2016-12-15T19:50:48Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=27|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@68c0dad5]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:50Z" finished-at="2016-12-15T19:50:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:50Z" finished-at="2016-12-15T19:50:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:50Z" finished-at="2016-12-15T19:50:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:50Z" finished-at="2016-12-15T19:50:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@faeb9d8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1648" started-at="2016-12-15T19:50:50Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=28|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@34fbb800]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.GeneratedMethodAccessor50.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:52Z" finished-at="2016-12-15T19:50:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:52Z" finished-at="2016-12-15T19:50:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:52Z" finished-at="2016-12-15T19:50:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:52Z" finished-at="2016-12-15T19:50:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@182b1bf3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1611" started-at="2016-12-15T19:50:52Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=28|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@3ea452ad]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.GeneratedMethodAccessor50.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:53Z" finished-at="2016-12-15T19:50:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:53Z" finished-at="2016-12-15T19:50:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:53Z" finished-at="2016-12-15T19:50:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:53Z" finished-at="2016-12-15T19:50:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3637faea]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1539" started-at="2016-12-15T19:50:53Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=29|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@5ee429d7]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.GeneratedMethodAccessor50.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:55Z" finished-at="2016-12-15T19:50:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:55Z" finished-at="2016-12-15T19:50:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:55Z" finished-at="2016-12-15T19:50:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="2" started-at="2016-12-15T19:50:55Z" finished-at="2016-12-15T19:50:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@153a3475]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="FAIL" signature="updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="updateChallenge" duration-ms="1441" started-at="2016-12-15T19:50:55Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=29|TestTitle=updateChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.wooplr.bean.ChallengeJAXB@3cee09f8]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response body is coming null !! expected object to not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response body is coming null !! expected object to not be null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotNull(Assert.java:404)
	at com.wooplr.challenge.test.ChallengeHelper.validatechallenge(ChallengeHelper.java:19)
	at com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(ChallengeTestPlan.java:155)
	at sun.reflect.GeneratedMethodAccessor50.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:1027)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1207)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:38)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:382)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:56Z" finished-at="2016-12-15T19:50:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[takeScreenShotOnFailure :: Capturing Screenshots !!!]]>
            </line>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:56Z" finished-at="2016-12-15T19:50:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:56Z" finished-at="2016-12-15T19:50:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateChallenge status=FAILURE method=ChallengeTestPlan.updateChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeTestMethod([Ljava.lang.Object;, java.lang.reflect.Method, org.testng.ITestContext, org.testng.xml.XmlTest)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="beforeTestMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:56Z" finished-at="2016-12-15T19:50:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2049f836]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.validateListChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@4088ead1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Test: "Wooplr_Challenge Testscripts - Sanity" verbose:1[parameters:][metagroups:] [included: Sanity ][excluded: ]  classes:[XmlClass class=com.wooplr.challenge.test.ChallengeHelper] [XmlClass class=com.wooplr.challenge.test.ChallengeTestPlan]  packages:org.testng.xml.XmlPackage@c6ce3632 ] ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTestMethod -->
        <test-method status="PASS" signature="validateListChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="validateListChallenge" duration-ms="1228" started-at="2016-12-15T19:50:56Z" data-provider="CHALLENGE" finished-at="2016-12-15T19:50:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestCaseId=31|TestTitle=validateListChallenge]]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateListChallenge -->
        <test-method status="PASS" signature="_takeScreenShotOnFailure(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="_takeScreenShotOnFailure" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:57Z" finished-at="2016-12-15T19:50:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validateListChallenge status=SUCCESS method=ChallengeTestPlan.validateListChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- _takeScreenShotOnFailure -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:57Z" finished-at="2016-12-15T19:50:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validateListChallenge status=SUCCESS method=ChallengeTestPlan.validateListChallenge(com.wooplr.base.util.internal.entity.TestObject, com.wooplr.bean.ChallengeJAXB)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestMethod" is-config="true" duration-ms="0" started-at="2016-12-15T19:50:57Z" finished-at="2016-12-15T19:50:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.wooplr.challenge.test.ChallengeTestPlan.validateListChallenge(com.wooplr.base.util.internal.entity.TestObject,com.wooplr.bean.ChallengeJAXB)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestMethod -->
        <test-method status="PASS" signature="afterTestSuite()[pri:0, instance:com.wooplr.challenge.test.ChallengeTestPlan@5f257498]" name="afterTestSuite" is-config="true" duration-ms="1" started-at="2016-12-15T19:50:58Z" finished-at="2016-12-15T19:50:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestSuite -->
      </class> <!-- com.wooplr.challenge.test.ChallengeTestPlan -->
    </test> <!-- Wooplr_Challenge Testscripts - Sanity -->
  </suite> <!-- Wooplr_Challenge_Testcases -->
</testng-results>
